AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for Todo List Application - DynamoDB Table and S3 Bucket'

Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the EC2 instance will be launched

  CopyBuildFromBucket:
    Type: String
    Description: ARN of the public S3 bucket containing the instructor's build file (fallback if own build doesn't exist)
    AllowedPattern: '^arn:aws:s3:::[a-z0-9][a-z0-9\-]*[a-z0-9]$'
    ConstraintDescription: Must be a valid S3 bucket ARN

Resources:
  # DynamoDB Table for Todo Items
  TodoItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'TodoItems'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      Tags:
        - Key: Application
          Value: TodoApp

  # S3 Bucket for CSV Exports
  TodoExportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'todo-exports-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldExports
            Status: Enabled
            ExpirationInDays: 7
            NoncurrentVersionExpirationInDays: 1
      VersioningConfiguration:
        Status: Suspended
      Tags:
        - Key: Application
          Value: TodoApp

  # S3 Bucket for Builds 
  TodoBuildsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'todo-builds-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldBuilds
            Status: Enabled
            ExpirationInDays: 14
            NoncurrentVersionExpirationInDays: 1
      VersioningConfiguration:
        Status: Suspended
      Tags:
        - Key: Application
          Value: TodoApp

  # SNS Topic for Todo Notifications
  TodoNotificationsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: 'todo-notifications'
      DisplayName: 'Todo Notifications'
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Application
          Value: TodoApp

  # SQS Queue for Todo Exports
  TodoExportsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'todo-exports'
      KmsMasterKeyId: alias/aws/sqs
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeout: 120 # 120 seconds
      Tags:
        - Key: Application
          Value: TodoApp

  # Parameter Store Parameters for Feature Flags
  #
  # A "Feature Flag" is used to dynamically turn a feature or codepath
  # ON (true) or OFF (false) without having to deploy updated code.
  #
  SendNotificationsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/todoapp/sendNotifications'
      Type: String
      Value: 'false'
      Description: 'Feature flag to control whether notifications are sent'
      Tags:
        Application: TodoApp

  ShowDeleteFromEditPageParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/todoapp/showDeleteFromEditPage'
      Type: String
      Value: 'false'
      Description: 'Feature flag to control whether delete button is shown on edit page'
      Tags:
        Application: TodoApp

  UseQueueForExportsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/todoapp/useQueueForExports'
      Type: String
      Value: 'false'
      Description: 'Feature flag to control whether queue is used for exports'
      Tags:
        Application: TodoApp

  # IAM Managed Policy for DynamoDB Access
  TodoAppDynamoDBManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: 'TodoApp-DynamoDB-Policy'
      Description: 'Managed policy for DynamoDB access in Todo App'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:DescribeTable
            Resource:
              - !GetAtt TodoItemsTable.Arn
              - !Sub '${TodoItemsTable.Arn}/index/*'

  # IAM Managed Policy for S3 Access to the Exports bucket
  # Needed by the App's Export functionality
  TodoAppS3ManagedExportsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: 'TodoApp-S3-Policy-Export'
      Description: 'Managed policy for S3 access in Todo App'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:DeleteObject
            Resource:
              - !Sub '${TodoExportsBucket.Arn}/*'
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !GetAtt TodoExportsBucket.Arn

  # IAM Managed Policy for S3 Access to the Own Builds bucket
  # Allows EC2 to read from the template-created build bucket
  TodoAppS3ManagedOwnBuildsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: 'TodoApp-S3-Policy-OwnBuilds'
      Description: 'Managed policy for S3 access to retrieve build zip file from own bucket'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - !Sub '${TodoBuildsBucket.Arn}/*'
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !GetAtt TodoBuildsBucket.Arn

  # IAM Managed Policy for S3 Access to the Instructor's Builds bucket
  # Allows EC2 to read from the instructor's public build bucket (fallback)
  TodoAppS3ManagedInstructorBuildsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: 'TodoApp-S3-Policy-InstructorBuilds'
      Description: 'Managed policy for S3 access to retrieve build zip file from instructor bucket'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - !Sub '${CopyBuildFromBucket}/*'
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !Ref CopyBuildFromBucket

  # IAM Managed Policy for SNS Access
  TodoAppSNSManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: 'TodoApp-SNS-Policy'
      Description: 'Managed policy for SNS access in Todo App'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !Ref TodoNotificationsTopic

  # IAM Managed Policy for SQS Access
  TodoAppSQSManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: 'TodoApp-SQS-Policy'
      Description: 'Managed policy for SQS access in Todo App'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:GetQueueAttributes
            Resource:
              - !GetAtt TodoExportsQueue.Arn

  # IAM Managed Policy for Parameter Store Access
  TodoAppSSMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: 'TodoApp-SSM-Policy'
      Description: 'Managed policy for Parameter Store access in Todo App'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
            Resource:
              # This is a wildcard so any parameter in /todoapp can be read
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/todoapp/*'

  # IAM Role for EC2 Instance
  TodoAppEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'TodoApp-EC2-Role'
      Description: 'IAM Role for EC2 instances running the Todo App'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref TodoAppDynamoDBManagedPolicy
        - !Ref TodoAppS3ManagedExportsPolicy
        - !Ref TodoAppS3ManagedOwnBuildsPolicy
        - !Ref TodoAppS3ManagedInstructorBuildsPolicy
        - !Ref TodoAppSNSManagedPolicy
        - !Ref TodoAppSQSManagedPolicy
        - !Ref TodoAppSSMManagedPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Application
          Value: TodoApp

  # EC2 Instance Profile
  TodoAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: 'TodoApp-InstanceProfile'
      Roles:
        - !Ref TodoAppEC2Role

  # Security Group for EC2 Instance
  TodoAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'TodoApp-SecurityGroup'
      GroupDescription: 'Security group for Todo App EC2 instances'
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
          Description: 'Allow Next.js application access'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: 'Allow all outbound traffic'
      Tags:
        - Key: Name
          Value: 'TodoApp-SG'
        - Key: Application
          Value: TodoApp

  # Launch Template for EC2 Instance
  TodoAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: 'TodoApp-LaunchTemplate'
      LaunchTemplateData:
        ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64}}'
        InstanceType: t3.medium
        IamInstanceProfile:
          Arn: !GetAtt TodoAppInstanceProfile.Arn
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            Groups:
              - !Ref TodoAppSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # User Data script for To Do App deployment (NodeJs/Next.js)

            # Install Node.js LTS and npm
            curl -fsSL https://rpm.nodesource.com/setup_lts.x | bash -
            dnf install -y nodejs

            # Retrieve REGION and AWS ACCOUNT ID automatically using IMDS v2
            # IMDS = Instance Meta Data Service
            # This allows us to retrieve dynamic settings (Like IP Address) at launch
            TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" \
              -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" \
              -s)

            IDENTITY_DOCUMENT=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" \
              -s http://169.254.169.254/latest/dynamic/instance-identity/document)

            export AWS_REGION=$(echo "$IDENTITY_DOCUMENT" | grep -oP '"region"\s*:\s*"\K[^"]+')
            echo "AWS_REGION=$AWS_REGION"

            export AWS_ACCOUNT_ID=$(echo "$IDENTITY_DOCUMENT" | grep -oP '"accountId"\s*:\s*"\K[^"]+')
            echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID"

            # Create and navigate to app directory
            mkdir -p /opt/nextjs-app
            cd /opt/nextjs-app

            # Download and extract build file
            # Try own bucket first, fallback to instructor's bucket if not found
            echo "Attempting to download build from own bucket..."
            if ! aws s3 cp s3://todo-builds-$AWS_ACCOUNT_ID/todo.zip ./todo.zip 2>/dev/null; then
                echo "Build not found in own bucket, trying instructor's bucket..."
                # Extract bucket name from ARN (format: arn:aws:s3:::bucket-name)
                INSTRUCTOR_BUCKET=$(echo "${CopyBuildFromBucket}" | cut -d: -f6)
                echo "Instructor bucket: $INSTRUCTOR_BUCKET"
                aws s3 cp s3://$INSTRUCTOR_BUCKET/todo.zip ./todo.zip
                if [ $? -eq 0 ]; then
                    echo "Successfully downloaded build from instructor's bucket"
                else
                    echo "ERROR: Failed to download build from either bucket"
                    exit 1
                fi
            else
                echo "Successfully downloaded build from own bucket"
            fi

            # Extract the build
            unzip todo.zip

            # Install dependencies for Linux platform
            npm install --production

            # Start the Next.js application
            AWS_REGION=$AWS_REGION EXPORT_DELAY_SECONDS=15 DYNAMODB_TABLE_NAME=${TodoItemsTable} S3_BUCKET_NAME=${TodoExportsBucket} SNS_TOPIC_ARN=${TodoNotificationsTopic} SQS_QUEUE_URL=${TodoExportsQueue} nohup npm start > /var/log/nextjs-app.log 2>&1 &

            echo "To Do application started. Check logs at: /var/log/nextjs-app.log"
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: 'TodoApp-Instance'
              - Key: Application
                Value: TodoApp

  # EC2 Instance
  TodoAppEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref TodoAppLaunchTemplate
        Version: !GetAtt TodoAppLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: 'TodoApp-Instance'
        - Key: Application
          Value: TodoApp

Outputs:
  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value: !Ref TodoItemsTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTableName'

  S3ExportsBucketName:
    Description: Name of the S3 bucket for exports
    Value: !Ref TodoExportsBucket
    Export:
      Name: !Sub '${AWS::StackName}-Exports-S3BucketName'

  S3BuildsBucketName:
    Description: Name of the S3 bucket for holding application builds
    Value: !Ref TodoBuildsBucket
    Export:
      Name: !Sub '${AWS::StackName}-Builds-S3BucketName'

  SNSTopicArn:
    Description: ARN of the SNS Topic for notifications
    Value: !Ref TodoNotificationsTopic
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopicArn'

  SNSTopicName:
    Description: Name of the SNS Topic for notifications
    Value: !GetAtt TodoNotificationsTopic.TopicName
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopicName'

  SQSQueueUrl:
    Description: URL of the SQS Queue for exports
    Value: !Ref TodoExportsQueue
    Export:
      Name: !Sub '${AWS::StackName}-SQSQueueUrl'

  SQSQueueArn:
    Description: ARN of the SQS Queue for exports
    Value: !GetAtt TodoExportsQueue.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SQSQueueArn'

  EC2PublicIp:
    Description: EC2 Instance Public IP Address
    Value: !GetAtt TodoAppEC2Instance.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-EC2PublicIp'

  EC2PublicDnsName:
    Description: EC2 Instance Public DNS Name
    Value: !GetAtt TodoAppEC2Instance.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-EC2PublicDnsName'

  EC2ApplicationUrl:
    Description: URL to access the Todo Application
    Value: !Sub 'http://${TodoAppEC2Instance.PublicIp}:3000'
    Export:
      Name: !Sub '${AWS::StackName}-EC2ApplicationUrl'
